---------------------------------------------------------------------
Contents
---------------------------------------------------------------------
	About

	Copyright

	Requirements

	Installation

---------------------------------------------------------------------
About
---------------------------------------------------------------------
	Skidder is primarily intended as an error notification system.
You register applications in Skidder, allowing them to post errors.
Then, you can subscribe to Skidder's notifications for that application.
Skidder allows you to control how frequently notifications for the same
error will be sent.  Log entries will be stored in Skidder and can be
browsed and purged on the website.

	While it was built with error notifications in mind, it can be
used for any kind of notifications or log entries desired.  It's up to
the users of Skidder to post log entries that they want notifications
from.

---------------------------------------------------------------------
Copyright
---------------------------------------------------------------------
	Skidder is written and copyrighted by the
City of Bloomington, IN.  It is being released as free software;
you can redistribute it and/or modify it under the terms of the
GNU Affero General Public License as published by the Free Software Foundation;
either version 3 of the License, or (at your option) any later version.

---------------------------------------------------------------------
Requirements
---------------------------------------------------------------------
framework:
This scaffolding requires our framework to be on the server somewhere.
It ships with a working version of framework installed in /libraries.
In the configuration, you can point the application to another copy
of the framework, if you like.  If you make changes to the code in
the /libraries/framework, you might consider sending those changes
back to us, so we can improve our scaffolding.

This application was written assuming you have control over your own web
server.  If you are on a hosted system, you may need to make changes to
the code to accomodate your server.

All include files have been kept out of the web directory, and a configuration
file has been included. You will need to make sure that every .php script
in the HTML directory includes configuration.inc.  If you control your own
webserver, you can add a <Directory> command to your httpd.conf.

PHP:
PHP must be compiled with support for:
	PDO
	MySQL
	LDAP
	CURL

	Actually, you can substitute any database support for MySQL, as our
framework uses PDO for database interaction.  However, the initial SQL
schema provided is specific to MySQL.  The schema would need to be modified
for other databases.

MySQL:
	MySQL should have support for InnoDB.  Foreign keys are written into
the database load scripts.  While MyISAM tables will just ignore them,
you database and your application will be that much more robust with InnoDB
support.

LDAP:
	LDAP is only used for doing LDAP authentication for users.
If you're not going to do any LDAP authentication, you can delete or
comment out the LDAP stuff.

CURL:
	Using the Skidder error reporting, errors can be sent to a central web
service.  We use PHP's curl functions to POST data to a Skidder server.
If you do not use this type of error reporting, you can safely ignore the
curl requirement.

---------------------------------------------------------------------
Installation
---------------------------------------------------------------------
Server Configuration
	We need to allow for large POST.  If you want applications to be able
to send large ( >1M ) log entries,  some server-side values need to be set:
	PHP post_max_size:
		This is set in PHP.ini, but you can also set them in the httpd.conf,
		or in the configuration.inc.  The default value is usually 8M, which
		should be large enough for most cases.
	MySQL max_allowed_packet:
		This is the largest string PHP can send to MySQL, and is set in the
		my.cnf file. The default value is usually only 1M, and is usually the
		limiting factor in getting large log messages to POST correctly.

	We rely on Apache's mod_rewrite to route all traffic to /public/index.php
If this is the only web application on your apache server, you can just point
your apache's web directory to the public directory inside the application and
add the Rewrite rules.

	For us, we're running multiple applications, and have a seperate entry in
our Apache config for each one.  This does essentially the same thing.

Add to httpd.conf:

Alias /application_name "/path/to/application_name/public"
<Directory "/path/to/application_name/public">
    Options FollowSymLinks
    AllowOverride None
    Order allow,deny
    Allow from all

    RewriteEngine On
    RewriteBase /application_name
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteRule .? /application_name/index.php [NC,L]
</Directory>

---------------------------------------------------------------------
 Securing the user accounts and sessions
---------------------------------------------------------------------
	Any web application is going to need users to log in, and for
sessions to be kept track of.  Sessions are cookies handed out to the
browser.
	For the purposes of hacking into a person's account, these cookies
are just as good as a username and password.  If someone steals the
cookie by sniffing traffic, they can use the cookie to log themselves
in as that user.
	Making sure the cookies only get used over SSL is the safe way to
keep track of sessions.  The default configuration file now only sets
cookies over SSL.  Also, the BASE_URL is set to keep them on HTTPS
once they're logged in.
	All that's left is to edit Apache configuration to rewrite people
over to SSL when they go to log in.

<Directory "/path/to/application_name/html/login">
    RewriteEngine On
    RewriteCond   %{SERVER_PORT}  !^443$
    RewriteRule ^(.*)$ https://%{HTTP_HOST}/skidder/login/$1
</Directory>

---------------------------------------------------------------------
Create Database
---------------------------------------------------------------------
If you don't already have a database set up, you will need to create one.
It's recommended to create a database user for this application that will
only have access to the database for this application.  Here are the commands
to create the database and set up a user in MySQL:

mysql> create database skidder;
mysql> grant all privileges on skidder.* to username@localhost identified by 'password';
mysql> flush privileges;

---------------------------------------------------------------------
Configuration
---------------------------------------------------------------------
	Edit configuration.inc with appropriate values for your installation.
This will include where you installed the application, and the username and
password for the database user you created.

---------------------------------------------------------------------
Load Initial Database
---------------------------------------------------------------------
Skidder ships with an SQL script to create the database tables,
and load some initial data.  You can pass this file directly to MySQL.

cd /path/to/skidder/scripts
mysql -u username -p password skidder < mysql.sql

---------------------------------------------------------------------
-- Log in as the admin
---------------------------------------------------------------------
The initial database script will create an admin user. You can log in initially
as admin:admin.  Once you log in, you should change the admin password, as well
as modifying the administrator user to whatever you like.

Users with the Administrator role can create user accounts and register
applications.
